package fr.amu.iut.bomberman.model.entities;

/**
 * Repr√©sente une entit√© d'explosion temporaire dans le jeu.
 * G√®re la dur√©e de vie et les animations des explosions.
 * Utilis√©e pour l'affichage visuel et la d√©tection de collision avec les joueurs.
 */
public class Explosion {

    /** Position X de l'explosion sur la grille */
    private int x, y;

    /** Timestamp de cr√©ation de l'explosion */
    private long timeCreated;

    /** Dur√©e de vie de l'explosion en millisecondes */
    private long duration;

    /** Indique si l'explosion est encore active */
    private boolean active;

    /** Indique si l'explosion peut infliger des d√©g√¢ts */
    private boolean damaging;

    /** Dur√©e par d√©faut d'une explosion (1 seconde) */
    public static final long DEFAULT_DURATION = 1000;

    /** Dur√©e pendant laquelle l'explosion inflige des d√©g√¢ts (0.5 seconde) */
    public static final long DAMAGE_DURATION = 500;

    /**
     * Constructeur d'explosion avec dur√©e par d√©faut.
     *
     * @param x Position X sur la grille
     * @param y Position Y sur la grille
     */
    public Explosion(int x, int y) {
        this.x = x;
        this.y = y;
        this.timeCreated = System.currentTimeMillis();
        this.duration = DEFAULT_DURATION;
        this.active = true;
        this.damaging = true;

        // DEBUG: Afficher la cr√©ation de l'explosion
        System.out.println("üí• Explosion cr√©√©e en (" + x + "," + y + ") √† " + timeCreated);
    }

    /**
     * Constructeur d'explosion avec dur√©e personnalis√©e.
     *
     * @param x Position X sur la grille
     * @param y Position Y sur la grille
     * @param duration Dur√©e de vie en millisecondes
     */
    public Explosion(int x, int y, long duration) {
        this.x = x;
        this.y = y;
        this.timeCreated = System.currentTimeMillis();
        this.duration = duration;
        this.active = true;
        this.damaging = true;

        // DEBUG: Afficher la cr√©ation de l'explosion
        System.out.println("üí• Explosion cr√©√©e en (" + x + "," + y + ") √† " + timeCreated + " (dur√©e: " + duration + "ms)");
    }

    /**
     * Met √† jour l'√©tat de l'explosion.
     * V√©rifie si elle doit √™tre d√©sactiv√©e selon sa dur√©e de vie.
     *
     * @return true si l'explosion est encore active
     */
    public boolean update() {
        if (!active) return false;

        long elapsed = System.currentTimeMillis() - timeCreated;

        // Arr√™ter les d√©g√¢ts apr√®s DAMAGE_DURATION
        if (damaging && elapsed >= DAMAGE_DURATION) {
            damaging = false;
            System.out.println("üî• Explosion (" + x + "," + y + ") n'inflige plus de d√©g√¢ts apr√®s " + elapsed + "ms");
        }

        // D√©sactiver compl√®tement apr√®s la dur√©e totale
        if (elapsed >= duration) {
            active = false;
            damaging = false;
            System.out.println("üí® Explosion (" + x + "," + y + ") d√©sactiv√©e apr√®s " + elapsed + "ms");
        }

        return active;
    }

    /**
     * Calcule le pourcentage de temps √©coul√© depuis la cr√©ation.
     * Utilis√© pour les effets d'animation et de fade-out.
     *
     * @return Pourcentage entre 0.0 et 1.0
     */
    public double getTimeProgress() {
        if (!active) return 1.0;
        long elapsed = System.currentTimeMillis() - timeCreated;
        return Math.min(1.0, (double) elapsed / duration);
    }

    /**
     * V√©rifie si l'explosion peut encore infliger des d√©g√¢ts.
     * Les explosions n'infligent des d√©g√¢ts que pendant une courte p√©riode.
     *
     * @return true si l'explosion peut infliger des d√©g√¢ts
     */
    public boolean canDamage() {
        return active && damaging;
    }

    /**
     * V√©rifie si l'explosion est dans sa phase de disparition.
     * Utilis√© pour les effets visuels de fade-out.
     *
     * @return true si l'explosion est en train de dispara√Ætre
     */
    public boolean isFading() {
        if (!active) return false;
        long elapsed = System.currentTimeMillis() - timeCreated;
        return elapsed > DAMAGE_DURATION;
    }

    /**
     * D√©sactive manuellement l'explosion avant la fin de sa dur√©e.
     */
    public void deactivate() {
        if (active) {
            System.out.println("üö´ Explosion (" + x + "," + y + ") d√©sactiv√©e manuellement");
        }
        this.active = false;
        this.damaging = false;
    }

    /**
     * Force l'arr√™t des d√©g√¢ts sans d√©sactiver l'explosion.
     * Utilis√© quand l'explosion doit rester visible mais ne plus √™tre dangereuse.
     */
    public void stopDamage() {
        if (damaging) {
            System.out.println("‚ö° Explosion (" + x + "," + y + ") arr√™te d'infliger des d√©g√¢ts");
        }
        this.damaging = false;
    }

    /**
     * Calcule le temps restant avant d√©sactivation compl√®te.
     *
     * @return Temps restant en millisecondes
     */
    public long getTimeRemaining() {
        if (!active) return 0;
        long elapsed = System.currentTimeMillis() - timeCreated;
        return Math.max(0, duration - elapsed);
    }

    /**
     * Retourne la position X de l'explosion.
     *
     * @return Coordonn√©e X sur la grille
     */
    public int getX() { return x; }

    /**
     * Retourne la position Y de l'explosion.
     *
     * @return Coordonn√©e Y sur la grille
     */
    public int getY() { return y; }

    /**
     * Indique si l'explosion est encore active.
     *
     * @return true si l'explosion est active
     */
    public boolean isActive() { return active; }

    /**
     * Indique si l'explosion peut infliger des d√©g√¢ts.
     *
     * @return true si l'explosion est dangereuse
     */
    public boolean isDamaging() { return damaging; }

    /**
     * Retourne le timestamp de cr√©ation.
     *
     * @return Timestamp en millisecondes
     */
    public long getTimeCreated() { return timeCreated; }

    /**
     * Retourne la dur√©e de vie configur√©e.
     *
     * @return Dur√©e en millisecondes
     */
    public long getDuration() { return duration; }

    /**
     * Repr√©sentation textuelle de l'explosion pour le debug.
     *
     * @return Description de l'explosion
     */
    @Override
    public String toString() {
        return String.format("Explosion{pos=(%d,%d), active=%s, damaging=%s, progress=%.2f, timeRemaining=%dms}",
                x, y, active, damaging, getTimeProgress(), getTimeRemaining());
    }
}